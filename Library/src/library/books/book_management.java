/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library.books;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import library.Database_connection;
import library.Main_frame;
import static library.Main_frame.c;

/**
 *
 * @author osama
 */
public class book_management extends javax.swing.JFrame {

    public ArrayList<String> m;
    Connection c;
    Statement st;
    ResultSet rs;

    /**
     * Creates new form book_management
     */
//public book_management(ArrayList<String> s) {s=this.m;}
    public book_management() {
        initComponents();
        c = Database_connection.connect();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        addBookBtn = new javax.swing.JButton();
        searchBookBtn = new javax.swing.JButton();
        searchBookTextField = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        addAuthorBtn = new javax.swing.JButton();
        addBookTypeBtn = new javax.swing.JButton();
        getAllBooksBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel1.setText("Book Management");

        addBookBtn.setText("Add book");
        addBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookBtnActionPerformed(evt);
            }
        });

        searchBookBtn.setText("Search book");
        searchBookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBookBtnActionPerformed(evt);
            }
        });

        searchBookTextField.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        searchBookTextField.setToolTipText("Enter book name");

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Search by Book Name");

        addAuthorBtn.setText("Add Book Author");
        addAuthorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAuthorBtnActionPerformed(evt);
            }
        });

        addBookTypeBtn.setText("Add Book Type");
        addBookTypeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookTypeBtnActionPerformed(evt);
            }
        });

        getAllBooksBtn.setText("Get all books");
        getAllBooksBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAllBooksBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 83, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addAuthorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(searchBookTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addBookTypeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                            .addComponent(searchBookBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addBookBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(getAllBooksBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addBookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getAllBooksBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addAuthorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBookTypeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBookTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookBtnActionPerformed
        addbook b = new addbook();
        b.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_addBookBtnActionPerformed

    private void searchBookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBookBtnActionPerformed
        m = new ArrayList<String>();
        ArrayList<book> books = new ArrayList<>();
        try {
            String Result = searchBookTextField.getText();
            if (Result.isEmpty()) {
                JOptionPane.showMessageDialog(this, "book name field can't be empty",
                        "Book", JOptionPane.ERROR_MESSAGE);
                return;
            }
            st = c.createStatement();
            rs = st.executeQuery("select * from book where lower(name) like '%" + Result + "%'");

            //check if there are no results
            if (!rs.isBeforeFirst()) {
                JOptionPane.showMessageDialog(this, "No results found",
                        "Book", JOptionPane.ERROR_MESSAGE);
                return;
            }

            while (rs.next()) {
                books.add(new book(rs.getString("id"), rs.getString("name"), rs.getString("description"), rs.getString("author"), rs.getString("type"),rs.getString("stock")));
            }
            for (int i = 0; i < books.size(); i++) {
                book book = books.get(i);
                String sql = "Select name from author_name where id='" + book.getAuthorID() + "'";
                rs = st.executeQuery(sql);
                while (rs.next()) {
                    book.setAuthorName(rs.getString("name"));
                }

                sql = "Select type from booktype where id='" + book.getTypeID() + "'";
                rs = st.executeQuery(sql);
                while (rs.next()) {
                    book.setTypeName(rs.getString("type"));
                }
            }
            
            books_table viewAllBooks = new books_table();
            viewAllBooks.fillBookTable(books);
            viewAllBooks.setVisible(true);
            this.dispose();

//            String authorID = null;
//            String bookTypeID = null;
//            while (r.next()) {
//                m.add(0, r.getString("name"));
//                m.add(1, r.getString("description"));
//                authorID = r.getString("author");
//                bookTypeID = r.getString("type");
//                m.add(2, r.getString("author"));
//                m.add(3, r.getString("type"));
//                m.add(4, r.getString("stock"));
//                m.add(5, r.getString("id"));
//            }
//
//            String sql = "Select name from author_name where id ='" + authorID + "'";
//            r = st.executeQuery(sql);
//            while (r.next()) {
//                m.add(6, r.getString("name"));
//            }
//            sql = "Select type from booktype where id ='" + bookTypeID + "'";
//            r = st.executeQuery(sql);
//            while (r.next()) {
//                m.add(7, r.getString("type"));
//            }
//
//            searchbook b = new searchbook(m);
//            b.setVisible(true);
//            this.dispose();

        } catch (Exception ex) {
            Logger.getLogger(book_management.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "This book doesn't exist",
                    "Book", JOptionPane.WARNING_MESSAGE);

            try {
                c.close();
            } catch (SQLException ex1) {
                Logger.getLogger(book_management.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }

        //create statement 
        //create statement 

    }//GEN-LAST:event_searchBookBtnActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Main_frame b = new Main_frame();
        b.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void addAuthorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAuthorBtnActionPerformed
        try {
            String author;
            author = JOptionPane.showInputDialog("What is the author name? ");
            if (author.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Author name can't be empty",
                        "Author", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (author != null) {
                Connection Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "root");
                Statement mySt = Con.createStatement();
                mySt.executeUpdate("INSERT INTO author_name" + " VALUES (NULL,'" + author + "')");
                JOptionPane.showMessageDialog(this, "Author Added",
                        "Author", JOptionPane.INFORMATION_MESSAGE);
                Con.close();
            } else {
                JOptionPane.showMessageDialog(this, "Adding canceled",
                        "Author", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(book_management.class.getName()).log(Level.SEVERE, null, ex);
        }
           }//GEN-LAST:event_addAuthorBtnActionPerformed

    private void addBookTypeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookTypeBtnActionPerformed
        try {
            String type;
            type = JOptionPane.showInputDialog("What is the book type? ");
            if (type.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Book typr can't be empty",
                        "Book Type", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (type != null) {
                Connection Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "root");
                Statement mySt = Con.createStatement();
                mySt.executeUpdate("INSERT INTO booktype" + " VALUES (NULL,'" + type + "')");
                JOptionPane.showMessageDialog(this, "Book Type Added",
                        "Book Type", JOptionPane.INFORMATION_MESSAGE);
                Con.close();
            } else {
                JOptionPane.showMessageDialog(this, "Adding canceled",
                        "Author", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(book_management.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addBookTypeBtnActionPerformed

    private void getAllBooksBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAllBooksBtnActionPerformed
        try {
            String[] names = {};
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "root");
            Statement a = con.createStatement();
            Statement b = con.createStatement();
            ResultSet f = a.executeQuery("SELECT * FROM book");
            ResultSet ct = b.executeQuery("SELECT COUNT(*) FROM book");
            if (ct.next()) {
                names = new String[ct.getInt(1)];
            }
            int i = 0;
            while (f.next()) {
                names[i] = f.getString("name");
                i++;

            }
            String res = (String) JOptionPane.showInputDialog(null, "Which book you want to see its details?", "Books",
                    JOptionPane.PLAIN_MESSAGE, null, names, names[0]);
            if (res != null) {
                Statement st = con.createStatement();
                ResultSet r = st.executeQuery("SELECT * FROM book where name ='" + res + "'");
                ArrayList<String> x = new ArrayList<String>();
                String authorID = null;
                String bookTypeID = null;
                while (r.next()) {
                    x.add(0, r.getString("name"));
                    x.add(1, r.getString("description"));
                    authorID = r.getString("author");
                    bookTypeID = r.getString("type");
                    x.add(2, r.getString("author"));
                    x.add(3, r.getString("type"));
                    x.add(4, r.getString("stock"));
                    x.add(5, r.getString("id"));
                }

                String sql = "Select name from author_name where id ='" + authorID + "'";
                r = st.executeQuery(sql);
                while (r.next()) {
                    x.add(6, r.getString("name"));
                }
                sql = "Select type from booktype where id ='" + bookTypeID + "'";
                r = st.executeQuery(sql);
                while (r.next()) {
                    x.add(7, r.getString("type"));
                }

                bookdetails d = new bookdetails(x);

                d.setVisible(true);
                this.dispose();

            } else {
                JOptionPane.showMessageDialog(this, "Canceled",
                        "Books", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(book_management.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getAllBooksBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(book_management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(book_management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(book_management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(book_management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new book_management().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAuthorBtn;
    private javax.swing.JButton addBookBtn;
    private javax.swing.JButton addBookTypeBtn;
    private javax.swing.JButton getAllBooksBtn;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton searchBookBtn;
    private javax.swing.JTextField searchBookTextField;
    // End of variables declaration//GEN-END:variables
}
